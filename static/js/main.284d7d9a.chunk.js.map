{"version":3,"sources":["Movies.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","toString","map","genre","index","slice","App","state","count","isLoading","movies","getMovies","a","axios","get","data","setState","add","current","minus","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAwDeA,MAlDf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACA,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBACEA,UAAU,eACVC,IAAKH,EACLI,IAAKN,EACLA,MAAOA,EAAMO,eAGjB,oBAAIH,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBN,UAAU,eAA1B,SACGK,GADMC,QAKb,mBAAGZ,GAAIA,EAAK,YACZ,oBAAGM,UAAU,iBAAb,UAA+BH,EAAQU,MAAM,EAAE,KAA/C,eCiGOC,G,kNA5DbC,MAAQ,CACNC,MAAO,EACPC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEP,WAAW,IAC3B,EAAKO,SAAS,CAAEN,WATN,2C,EAgBZO,IAAM,WACJ,EAAKD,UAAS,SAACE,GAAD,MAAc,CAAEV,MAAOU,EAAQV,MAAQ,O,EAEvDW,MAAQ,WACN,EAAKH,UAAS,SAACE,GAAD,MAAc,CAAEV,MAAOU,EAAQV,MAAQ,O,uDARvD,WACEY,KAAKT,c,oBAYP,WAAU,IAAD,EACuBS,KAAKb,MAA3BE,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASZ,UAAU,YAAnB,SACGW,EACC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGY,EAAOR,KAAI,SAACmB,GAAD,OACV,cAAC,EAAD,CAEE7B,GAAI6B,EAAM7B,GACVC,KAAM4B,EAAM5B,KACZC,MAAO2B,EAAM3B,MACbC,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAMC,mBACdzB,OAAQwB,EAAMxB,QANTwB,EAAM7B,e,GA3CT+B,IAAMC,YC3DxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.284d7d9a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./Movies.css\";\r\nimport App from \"./App\";\r\n\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n    <div className=\"movies__movie\">\r\n      <div className=\"movie\">\r\n        <div className=\"img__container\">\r\n          <img\r\n            className=\"movie__image\"\r\n            src={poster}\r\n            alt={title}\r\n            title={title.toString()}\r\n          />\r\n        </div>\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres_genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p id={id + \"summary\"}></p>\r\n        <p className=\"movie__summary\">{summary.slice(0,100)}...</p>\r\n        {/* <button\r\n          className=\"button_for_summary\"\r\n          id={id + \"button\"}\r\n          onClick={clickbutton}\r\n        >\r\n          Description\r\n        </button> */}\r\n      </div>\r\n    </div>\r\n  );\r\n// //   function clickbutton() {\r\n// //     console.log(id);\r\n// //     console.log(summary);\r\n    \r\n//     //const summary_id = document.getElementById(id + \"summary\");\r\n//   }\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: propTypes.number.isRequired,\r\n  year: propTypes.number.isRequired,\r\n  title: propTypes.string.isRequired,\r\n  summary: propTypes.string.isRequired,\r\n  poster: propTypes.string.isRequired,\r\n  genres: propTypes.arrayOf(propTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie; //잊지 말것\r\n","import propTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport Movies from \"./Movies\";\r\nimport \"./App.css\"\r\n\r\n//html태그 사이에 {}를 사용하는 것 만으로 손쉽게 자바스크립트 코드를 삽입할 수 있다.\r\n// function Food({ name, image, rating }) {\r\n\r\n//   return <li>\r\n//     <h1>I like {name}</h1>\r\n//     <img src={image} alt={name} width=\"300\" height=\"200\" />\r\n//     <h3>점수: {rating} / 5.0</h3>\r\n//   </li>\r\n\r\n// }\r\n\r\n// //propTypes는 코드에 안정성을 더해주는데 매우 매우 유용하다.\r\n// //설치하려면 npm -i prop-types를 입력해준다.\r\n// Food.propTypes = {\r\n//   name: propTypes.string.isRequired,\r\n//   image: propTypes.string.isRequired,\r\n//   rating: propTypes.number.isRequired //isRequired를 붙이면 반드시 rating이 number로 들어와야한다. (isRequired가 없으면 rating이 없어도 된다.)\r\n// }\r\n\r\n// const foodILike = [\r\n//   {\r\n//     id: 1,\r\n//     name: \"kimchi\",\r\n//     image: \"https://cdn.pixabay.com/photo/2019/07/25/01/35/kimchi-4361465_1280.jpg\",\r\n//     rating: 4.8\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     name: \"김밥\",\r\n//     image: \"https://cdn.pixabay.com/photo/2017/08/08/09/44/food-photography-2610864_1280.jpg\",\r\n//     rating: 4.5\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     name: \"돈가스\",\r\n//     image: \"https://cdn.pixabay.com/photo/2018/12/21/11/38/money-is-3887745_1280.jpg\",\r\n//     rating: 3.8\r\n//   },\r\n//   {\r\n//     id: 4,\r\n//     name: \"피자\",\r\n//     image: \"https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg\",\r\n//     rating: 4.0\r\n//   }\r\n\r\n// ]\r\n\r\n// function App() {\r\n//   return (\r\n\r\n//     <div className=\"App\">\r\n//       <ul>\r\n//         {foodILike.map(object => <Food key={object.id} name={object.name} image={object.image} rating={object.rating} />)}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    count: 0,\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    ); //이렇게{:}으로 내부로 들어가는것도 ES6 문법이라는데... 어렵고만.\r\n    this.setState({ isLoading: false });\r\n    this.setState({ movies }); //movies:movies로 넣어야 하지만 최신 자바 스크립트는 이해한다.\r\n  }; //비동기적 처리를 필요로 할때 async를 함수 앞에 붙이고 기다릴것을 await로 표시해준다.\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  add = () => {\r\n    this.setState((current) => ({ count: current.count + 1 }));\r\n  }; //currnet를 사용하는것이 좋은 방법이다. (this.state.count로 접근하는것보다)\r\n  minus = () => {\r\n    this.setState((current) => ({ count: current.count - 1 }));\r\n  };\r\n  //setState를 사용하면 그때마다 react는 render()를 다시 실행시켜준다!! 그래서 setState를 사용하는 것이다.\r\n  //이 점을 반드시 기억하도록 하자!\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state; //ES6에서 가능하게 된 문법이라는데.... 헐.. 몰게써요..\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movies\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n        {/* <h1>The number {this.state.count}</h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button> */}\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}